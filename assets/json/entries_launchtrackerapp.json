[
  {
    "id": "entry-2025-06-14-a",
    "title": "SpaceX Launch Tracker App",
    "date": "2025-06-14",
    "tags": ["blog", "project", "React-native"],
    "content": [
      {
        "type": "image",
        "src": "../assets/img/spacexapp/spaceXApi.jpg",
        "alt": "Example Image"
      },
      {
        "type": "text",
        "value": "This project documents the development of a mobile application built with React Native, designed to interact with the official SpaceX API. The app retrieves and displays structured data about rocket launches, providing users with access to detailed mission information, launch timelines, vehicles, and payloads. The technical process includes API integration techniques, asynchronous data fetching, state management, and UI composition optimized for mobile devices. Each entry reflects the architectural choices, implementation challenges, and iterative improvements carried out across the app’s lifecycle."
      }
    ]
  },
  {
    "id": "entry-2025-06-15-a",
    "title": "Project Setup: SpaceX Launch Tracker App",
    "date": "2025-06-15",
    "tags": ["blog", "project"],
    "content": [
      {
        "type": "text",
        "value": "This is the first post in the development log for the SpaceX Launch Tracker App, a mobile application built with React Native that fetches launch data from the public SpaceX API."
      },
      {
        "type": "text",
        "value": "The goal of the app is to provide users with a simple and accessible way to view information about upcoming and past launches — including mission details, launch dates, rockets, and payloads — all within a clean mobile interface."
      },
      {
        "type": "text",
        "value": "In this initial stage, I focused on getting the project up and running:"
      },
      {
        "type": "text",
        "value": "— Setting up the React Native environment"
      },
      {
        "type": "text",
        "value": "— Installing base dependencies"
      },
      {
        "type": "text",
        "value": "— Organizing the folder structure"
      },
      {
        "type": "text",
        "value": "— Defining core tools"
      },
      {
        "type": "text",
        "value": "This post sets the foundation. Future updates will cover API integration, data handling, UI components, and the decisions made along the way as the app takes shape."
      },
      {
        "type": "text",
        "value": "The idea is to document the full process, including challenges, as transparently as possible."
      },
      {
        "type": "code",
        "language": "url",
        "value": "https://github.com/BambuBlu/spacex-launch-tracker-app"
      }
    ]
  },
  {
    "id": "entry-2025-06-16-a",
    "title": "App Flow and Architecture: Structuring the SpaceX Launch Tracker — 1",
    "date": "2025-06-16",
    "tags": ["blog", "project"],
    "content": [
      {
        "type": "text",
        "value": "Now that the foundation of the SpaceX Launch Tracker App is in place, the next step was getting real data into the project. This post covers how the app fetches, in teory, launch data from the SpaceX API, and how I structured that data for quick access and clean rendering."
      },
      {
        "type": "text",
        "value": "━━━━━━━━━━━━━━━━━"
      },
      {
        "type": "text",
        "value": "└ Connecting to the SpaceX API"
      },
      {
        "type": "image",
        "src": "../assets/img/spacexapp/basicDiagram.jpg",
        "alt": "Example Image"
      },
      {
        "type": "text",
        "value": "From the start, the app connects to the public SpaceX API, which provides detailed launch data. The two key endpoints used are:"
      },
      {
        "type": "code",
        "language": "code",
        "value": "/launches/past — for completed launches"
      },
      {
        "type": "code",
        "language": "code",
        "value": "/launches/upcoming — for planned future launches"
      },
      {
        "type": "text",
        "value": "When the app starts, both endpoints are queried immediately. The results are stored in two global variables (for now, using simple module-level JS variables), one for past launches and one for upcoming launches."
      },
      {
        "type": "text",
        "value": "━━━━━━━━━━━━━━━━━"
      },
      {
        "type": "text",
        "value": "└ Data Structures and Optimization"
      },
      {
        "type": "image",
        "src": "../assets/img/spacexapp/basicDiagramCode.jpg",
        "alt": "Example Image"
      },
      {
        "type": "text",
        "value": "Rather than working with the full launch objects across the app — which are large and include a lot of unnecessary metadata — I created two additional structures:"
      },
      {
        "type": "code",
        "language": "code",
        "value": "A list of launch names (for things like search, random selection, etc.)"
      },
      {
        "type": "code",
        "language": "code",
        "value": "A dictionary mapping each launch name to its full object (for fast lookups)"
      },
      {
        "type": "text",
        "value": "This allows me to keep rendering and navigation fast and lightweight, without repeatedly traversing massive arrays or re-parsing nested objects."
      },
      {
        "type": "text",
        "value": "━━━━━━━━━━━━━━━━━"
      },
      {
        "type": "text",
        "value": "└ Why This Structure?"
      },
      {
        "type": "text",
        "value": "Fetching and storing the data once — and then slicing it into helper structures — reduces overhead in the UI and navigation layers. Instead of repeatedly filtering or looping through large arrays, the app can look up exactly what it needs when it needs it."
      },
      {
        "type": "text",
        "value": "This approach also keeps the UI components clean and focused. They don't need to know about the shape of the full API — just the launch name or ID they're working with."
      }
    ]
  },
  {
    "id": "entry-2025-06-16-a",
    "title": "App Flow and Architecture: Structuring the SpaceX Launch Tracker — 2",
    "date": "2025-06-16",
    "tags": ["blog", "project"],
    "content": [
      {
        "type": "text",
        "value": "With data fetching and internal organization in place, the next major focus was on structuring the app’s navigation flow and building the first versions of the core screens. This post walks through the screen layout, how routing works with parameters, and some of the reasoning behind key design choices."
      },
      {
        "type": "text",
        "value": "━━━━━━━━━━━━━━━━━"
      },
      {
        "type": "text",
        "value": "└ Navigation and Screens Overview"
      },
      {
        "type": "image",
        "src": "../assets/img/spacexapp/wireScreen.webp",
        "alt": "Example Image"
      },
      {
        "type": "text",
        "value": "After fetching data, the app moves into its navigation flow, handled via React Navigation. Here’s how it's structured:"
      },
      {
        "type": "text",
        "value": "1. Home Screen, the main hub after data is loaded. It offers three ways to view a specific launch:"
      },
      {
        "type": "text",
        "value": "● Latest Launch – shows the most recent result from the past launches"
      },
      {
        "type": "text",
        "value": "● Search – allows a user to look up by name"
      },
      {
        "type": "text",
        "value": "● Random Launch – selects one from either list"
      },
      {
        "type": "text",
        "value": "It also displays a Stat Sheet that links to the Launch List Screen (filtered views)."
      },
      {
        "type": "text",
        "value": "2. Launch Screen, this screen shows details about a specific launch. It receives the launch name (or an identifier) as a parameter and:"
      },
      {
        "type": "text",
        "value": "● Looks up the corresponding full data from the dictionary"
      },
      {
        "type": "text",
        "value": "● Displays info like mission name, flight number, date, mission patch, and links"
      },
      {
        "type": "text",
        "value": "● Supports loading a specific launch via: Search - Latest - Random"
      },
      {
        "type": "text",
        "value": "3. Launch List Screen, this screen lists launches by category:"
      },
      {
        "type": "text",
        "value": "Completed → past launches"
      },
      {
        "type": "text",
        "value": "Planned → upcoming launches"
      },
      {
        "type": "text",
        "value": "It receives a filter parameter and displays a scrollable list, with basic info and tap-to-view navigation into the Launch Screen."
      },
      {
        "type": "text",
        "value": "4. Persistent Refresh Button, This refresh button appears in the top-right corner of the header on all main screens. Pressing it re-fetches data from the SpaceX API and updates all internal structures without restarting the app."
      },
      {
        "type": "text",
        "value": "━━━━━━━━━━━━━━━━━"
      },
      {
        "type": "text",
        "value": "└ Design Decisions"
      },
      {
        "type": "text",
        "value": "A few key decisions made during this phase:"
      },
      {
        "type": "text",
        "value": "A few key decisions made during this phase:"
      },
      {
        "type": "text",
        "value": "Global state via module variables: This is a temporary solution — state management may be refactored later using React Context or Redux if the app grows."
      },
      {
        "type": "text",
        "value": "Scoped feature set: For now, I’m focusing only on launch data, not covering rockets, payloads, or crew info. The idea is to build something solid, then consider expanding."
      }
    ]
  }
]
